import 'dart:async';
import 'package:barcode_reader_webassembly/barcode_reader_webassembly_js.dart';
import 'package:barcode_reader_webassembly/barcode_reader_webassembly_platform_interface.dart';
import 'package:barcode_reader_webassembly/barcode_reader_webassembly_web.dart';
import 'package:js/js_util.dart';

/// It's a wrapper around the WebAssembly code that's generated by the `barcode_reader_webassembly`
/// package
class BarcodeReaderWebassemblyInterop extends BarcodeReaderWebassemblyPlatform {
  /// It's a Dart function that calls the JavaScript function `readBarcodeFromStack`
  @override
  Future<String> readBarcodeFromStack(ReadBarcodeProps readBarcodeProps) async {
    /// It's preparing the parameters that will be passed to the JavaScript function.
    final BarcodeReadJsProps readBarcodeJsProps =
        prepareParameters(readBarcodeProps);

    /// It's converting the JavaScript Promise to a Dart Future.
    final barcode = await promiseToFuture(
        BarcodeReaderWebassemblyInteropJs.readBarcodeFromStack(
            readBarcodeJsProps));
    return barcode;
  }

  /// It reads a barcode.
  ///
  /// Args:
  ///   readBarcodeProps (ReadBarcodeProps): This is a class that contains the properties for the
  /// barcode scanner.
  @override
  Future<String> readBarcode(ReadBarcodeProps readBarcodeProps) async {
    /// It's preparing the parameters that will be passed to the JavaScript function.
    final BarcodeReadJsProps readBarcodeJsProps =
        prepareParameters(readBarcodeProps);

    /// It's converting the JavaScript Promise to a Dart Future.
    final barcode = await promiseToFuture(
        BarcodeReaderWebassemblyInteropJs.readBarcode(readBarcodeJsProps));
    return barcode;
  }

  /// > It takes a `ReadBarcodeProps` object and returns a `BarcodeReadJsProps` object
  ///
  /// Args:
  ///   readBarcodeProps (ReadBarcodeProps): The object that contains the properties for the barcode
  /// reader.
  BarcodeReadJsProps prepareParameters(ReadBarcodeProps readBarcodeProps) {
    /// It's checking if the application is running in a test environment. If it is, then it's
    /// setting the `wasmPath` property to `assets`. Otherwise, it's setting it to
    /// `assets/packages/barcode_reader_webassembly/assets`.
    const isEnvironmentTest = bool.fromEnvironment('TEST_ENV');
    print('isEnvironmentTest interop:  ' + isEnvironmentTest.toString());

    /// It's creating a new `BarcodeReadJsProps` object and assigning it to the `readBarcodeJsProps`
    /// variable.
    final BarcodeReadJsProps readBarcodeJsProps = BarcodeReadJsProps();
    readBarcodeJsProps.file = readBarcodeProps.file;
    readBarcodeJsProps.filePath = readBarcodeProps.filePath;
    readBarcodeJsProps.scale = readBarcodeProps.scale;
    readBarcodeJsProps.sequenceNum = readBarcodeProps.sequenceNum;
    readBarcodeJsProps.wasmPath = isEnvironmentTest
        ? 'assets'
        : 'assets/packages/barcode_reader_webassembly/assets';

    return readBarcodeJsProps;
  }
}
